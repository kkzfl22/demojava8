为了正确的编写 API文档，必须在每个被导出的类、接口、构造器、方法和域声明 之前增加一个文档注释。
使用没有文档注释的API是非常痛苦的，也很容易出错


方法的文档注释应该简洁地描述 出和客户端之间的约定。应该说明这个方法做了什么，则不是说明它是如何完成这项工作的。
文档注释 应该列举出这个方法的所有前提条件和后置条件 
前提条件是批为了使客户能够调用 这个方法，而必须要满足的条件。
后置条件是指在调用成功完成之后，哪结条件必须被满足。
一般情况下前提条件是由@throws标签针对未受检的异常所隐含描述的；每个未受检的异常都对应一个前提违例
同样的也可以在一些受影响的参数 的@param标识 中指定前提条件 。

除前提条件与后置条件之外，每个方法还应该描述它的副作用，
副作用指系统状态中可以观察到的变化。它不是为了后置条件而明确要求的变化。例如启动了后台线程.


完整描方法的约定。方法的文档注释应该让每个参数都 有一个@param标签及一个@return标签（除非这个方法的返回类型为void），
以及对于方方法抛出的每个异常，无论是受检的还是未受检的都有一个@throws标签，按惯例，
跟他@param标签或者@return标签后面的文字应该是一个名词短语 


没有必须在文档注释中使用HTML<Code>或者<tt>标签了，javadoc{@code}标签更好，因为它避免了转义HTML元字符
例如：@throws IndexOutOfBoundsException if the index is out of range ({@code index < 0 || index >= this.size})

为了产生包含HTML元字符的文档，比如小于号（<）、大于号（>）以及“与”号（&），必须采取特殊的动作。
让这些字符出现在文档中最佳办法是用{@literal}标签将它们包围起来，这样就限制了HTML标记和嵌套的javadoc标签的处理。
例如: *the triange inequality is {@literal | x + y| < |x| + |y|}


同一个类或者接口中的两个成员或者构造器，不应该具有同样的概要描述。特别是重载情形

java1.5发行版本中增加的三个特性在文档注释 中需要特殊小心:泛型、枚举和注解。当为泛型或者方法编写文档时，确保要在文档中说明所有的类型参数

当为枚举类型编写文档时，要确保在说明常量

