package com.p3c.test;

/**
 * 单元测试
 *
 * <p>1，好的单元测试必须遵守AIR原则。
 * 单元测试在线上运行时，感觉像空气(AIR)一样，并不存在，但在测试质量的保障方面，它却是非常关键的，从宏观上来说，好的单元测试具有自动化，独立性，可重复执行的特点
 * 1）A:automatic(自动化） 2）I:Independent(独立性) 3)R:Repeatable(可重复)
 *
 * <p>2,单元测试应该是全自动执行的，并且是非交互式的，测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。
 * 需要人工检查输出结果的测试不是一个好的单元测试。单元测试中不准使用System.out飞机票行人肉验证。必须使用Assert验证
 *
 * <p>3,保持单元格测试的独立性，为了保证单元测试的稳定可靠且便于维护，单元测试用例之间绝不对互相调用，也不能依赖执行的先后顺序。
 *
 * <p>4，单元测试是可以重复执行的，不能受外界环境的影响。 单元测试通常会被放到持续集成中，每次有代码checkin时，单元测试都会被执行。如果单元测试对外部环境
 * （网络、服务、中间件等）有依赖， 则容易导致持续集成机制不可用。
 *
 * <p>5，对于单元测试，要保证测试粒度足够小，有且于精确定位问题，单元测试粒度至多是类级别，一般是方法级别，
 * 单元测试粒度小才能在出错时尽快定位到出错位置，单元测试不负责检查跨类或者跨系统的交互逻辑，那是集成测试的领域。
 *
 * <p>6，核心业务， 核发应用，核心模块，的增量代码确保单元测试通过 新增代码时，及时补充单元测试，如果新增代码影响了原有的单元测试，及时修正。
 *
 * <p>7，单元测试代码必须写在如下工程目录下:src/test/java,不允许写在业务 代码目录下
 *
 * <p>8，单元测试的基本目标，语句覆盖达到70%，核心语句模块，覆盖率和分支覆盖率都要达到100%
 * 工程规约的应用分层提到的DAO层，Manager层，可重用度高的Service,都应进行单元测试。
 *
 * <p>9，单元测试应遵守BCDE原则，以保证被测试的模板的交付质量 1)B:Border，边界测试，包括循环边界，特殊聚会，特殊时间点，数据顺序等。
 * 2）C:correct,正确地输入，并得到预期的结果。 3)D:Design,与设计文档相结合，来编写单元测试， 4）E:Error,强制错误信息输入（如非法数据，异常流程、非业务
 * 允许输入等），并得到预期的结果。
 *
 * <p>10，对于数据库相关的查询、更新、删除等操作，不能假设数据库里的数据是存在的，或者直接删除数据库把数据插入进行， 请使用程序插入或者导入数据的方式来准备数据。
 *
 * 11，和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识。
 *
 * 12，对不可测的代码建议做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范的测试代码。
 *
 * 13，在测试评审阶段，开发人员需要和测试人员一起明确单元测试范围，单元测试最好覆盖所有的测试用例。
 *
 * 14，单元测试是一种质量保障手段，不建议项目发布后补充单元测试用例，建议在项目前完成单元测试。
 *
 * 15，为了更方但的进行单元测试，业务 代码应出现以下情况：
 * 1）构造方法中做的事情过多。
 * 2）存在过多的全局变量和静态方法
 * 3）存在过多的外部依赖。
 * 4）存在过多的条件分支
 * 多层条件语句建议使用卫语我，在策略模式，状态模式等进行重构。
 *
 * 16，不要对单元测试存在如下误解，
 * 1）那是测试工程师干的事情，本文是开发手册，凡是本文内容都与开发工程师强相关的
 * 2）单元测试是多余的，汽车的整体功能与种单部件的测试正确与否都是强相关的
 * 3）单元测试不需要维护，如不维护，1年半载后，单元测试几乎处于废弃状态。
 * 4）单元测试与线上故障没有辩证关系，好的单元测试能够最大限度的规避线上故障.
 *
 * @author liujun
 * @version 0.0.1
 * @date 2018/09/03
 */
public class AlibabaTest {}
